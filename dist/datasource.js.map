{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","response","status","message","title","annotation","_","isArray","tags","Promise","resolve","annotationQuery","range","rangeRaw","limit","matchAny","result","interpolated","target","replace","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n  /**\n   * Can be optionally implemented to allow datasource to be a source of annotations for dashboard. To be visible\n   * in the annotation editor `annotations` capability also needs to be enabled in plugin.json.\n   */\n  // annotationQuery?(options: AnnotationQueryRequest<TQuery>): Promise<AnnotationEvent[]>;\n  annotationQuery(options) {\n    if (options.annotation.type === 'tags') {\n      // require at least one tag\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\n        return Promise.resolve([]);\n      }\n    }\n\n    const annotationQuery = {\n      range: options.range,\n      rangeRaw: options.rangeRaw,\n      limit: options.annotation.limit,\n      tags: options.annotation.tags,    \n      matchAny: options.annotation.matchAny,\n      type: options.annotation.type,\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}